*alti.txt*	補完が常時表示される入力インターフェイス

Author  : LeafCage <leafcage+vim @ gmail.com>
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
目次						*alti-contents*

概要				|alti-introduction|
使い方				|alti-usage|
変数				|alti-variables|
関数				|alti-functions|
Altiインターフェイス		|alti-Alti-interface|
  Context			  |alti-Context|
  Altiキーマッピング		  |alti-Alti-key-mappings|
TODO				|alti-todo|


==============================================================================
概要						*alti-introduction*

*alti* は補完を動的に表示するインプットインターフェイスです。
|input()|を強力にしたといえば分かり易いでしょう。
|ctrlp.vim|(https://github.com/kien/ctrlp.vim) のインターフェイスを参考に作ら
れました。Thanks! kien.
|ctrlp.vim|や|unite.vim|などが候補の絞り込みと選択を行うインターフェイスなのに
対して、こちらは入力と実行を行うためのインターフェイスです。つまり候補が主か、
入力が主かの違いです。ユーザの入力によって、表示させる候補を動的に変化させるよ
うな入力、複数の引数を取る入力に向きます。

最新版:
https://github.com/LeafCage/alti.vim


==============================================================================
使い方						*alti-usage*

1. altiの定義を作る。(altiはライブラリだからそのままでは動かない。)
2. alti#init()に定義を渡す。
3. altiが動く。
4. <C-n><C-p> (ctrlplike のときは <C-j><C-k>) で候補を選択、通常入力で絞込み、
   <Tab>で選択されている候補を挿入。
5. こうしてコマンドを組み立てたら、<CR>で実行。
6. コマンドを受け取った関数が何かする。やった！


==============================================================================
変数						*alti-variables*

g:alti_available				*g:alti_available*
	既定値: 1
	altiがインストールされているなら普通は 1 に定義される。
	altiを利用するプラグインのうち、alti.vimがインストールされていないとき
	には Altiコマンドを定義しないものは、|after-directory|以下のスクリプト
	からこの値を見て判断することを推奨している。 >
	" after/plugin/foo.vim
	if get(g:, 'alti_available')
	  command! AltiFoo    call ctrlp#init(foo#alti#define())
	endif

<	遅延読み込み(lazy)機能があるプラグインマネージャーを使っているなどで、
	altiを遅延読み込み設定している場合は、ユーザがvimrcなどでこの値を1に定
	義する必要がある。


g:alti_config_dir				*g:alti_config_dir*
	既定値: "~/.config/vim/alti"
	このディレクトリに履歴などのファイルが作成される。


g:alti_max_history				*g:alti_max_history*
	既定値: &history
	記録する履歴の数。標準では'history'オプションの設定に等しい。


g:alti_enable_statusline			*g:alti_enable_statusline*
	既定値: 1
	非0 なら専用のステータスラインを使う。


g:alti_cmpl_window				*g:alti_cmpl_window*
	この辞書によって補完ウィンドウに関する設定する。
	以下のキーを持つことができる。
	--------~
	pos		(文字列)
		ウィンドウの表示位置を "top" か "bottom" で指定できる。
		省略時には "bottom" が利用される。
	order		(文字列)
		候補の並びを "ttb" (上から下へ top to bottom) か "btt" (下から
		上へ bottom to top) で指定する。
		省略時には "ttb" が利用される。
	min_height	(数値)
		ウィンドウの最小の高さ。デフォルトでは 1 が利用される。
	max_height	(数値)
		ウィンドウの最大の高さ。デフォルトでは 10 が利用される。


g:alti_default_mappings_base			*g:alti_default_mappings_base*
	既定値: "standard"
	altiバッファ内で利用されるキーマッピングのベースを選択する。
	値として "standard" か "ctrlplike" を選択できる。
		standard	alti の操作に適したキーマッピング
		ctrlplike	|ctrlp.vim|の標準に似せたキーマッピング
	無効な値を指定した場合は "standard" が使用される。
	ベースとなるキーマッピングとその説明は|alti-Alti-key-mappings|を参照。
	|g:alti_prompt_mappings|でベースとなったマッピングをさらに書き換えるこ
	とができる。


g:alti_prompt_mappings				*g:alti_prompt_mappings*
	キーにキーマップ名、値にキーマッピング文字列のリストを指定した辞書で、
	|alti-Alti-key-mappings|で定義されたキーマッピングを上書きする。
	値に空リストを定義すると、そのキーマッピングは無効となる。
	Example: >
	let g:alti_prompt_mappings = {
	  \ 'PrtCurLeft()': ['<C-k>', '<Left>'],
	  \ 'PrtCurRight()': ['<C-l>', '<Right>'],
	  \ 'PrtPage(1)': ['<C-f>', '<C-Space>', '<PageDown>'],
	  \ 'PrtPage(-1)': ['<C-b>', '<S-Space>', '<PageUp>'],
	  \ 'PrtSubmit()': ['<CR>', '<C-j>'],
	  \ 'ToggleType(1)': ['<C-]>', '<C-Down>'],
	  \ 'ToggleType(-1)': ['<C-\>', '<C-Up>'],
	  \ 'PrtExit()': ['<Esc>', '<C-c>', '<C-g>', '<C-q>'],
	  \ }
<

g:alti_getreg_mappings				*g:alti_getreg_mappings*
	レジスタ挿入モード(標準では<C-r>)で利用できるマッピング。
	通常ここで任意の一文字を入力することでその文字のレジスタを挿入できる。
	しかしここで特殊な文字に特定のレジスタを充てることも可能。
	Example: >
	let g:alti_getreg_mappings = {}
	let g:alti_getreg_mappings['"'] = ['<C-e>']
	let g:alti_getreg_mappings['*'] = ['<C-y>']

<	この例の場合<C-r>の後の<C-e>で レジスタ " が、<C-y>で レジスタ * が挿
	入される。また、以下の特殊キーがセットされている。 >
 {
 \ 'expr': ['='],		<C-r>= Expressionレジスタのように、入力を評価
				しその結果を挿入する。
 \ '<cword>: ['<C-w>'],		<C-r><C-w> 事前のカーソル位置の単語を挿入する
 \ '<cWORD>': ['<C-a>'],	<C-r><C-a> 事前のカーソル位置のWORDを挿入する
 \ '<cfile>': ['<C-p>'],	<C-r><C-p> 'path'を使って展開された事前のカー
				ソル位置のファイル名 (gfで編集するものと同様)
 \ }


------------------------------------------------------------------------------
関数						*alti-functions*

alti#queue_msg({msg})				*alti#queue_msg()*
	altiウィンドウ出現中にメッセージを表示させる。alti実行中は画面が再描写
	されるので、通常の|:echo|などの表示は消されてしまうため、これを使う。


alti#queue_errmsg({errmsg})			*alti#queue_errmsg()*
	altiウィンドウ出現中にメッセージ履歴|message-history|に残るエラーメッ
	セージを表示させる。これはハイライトは|Error|のものが使われるが、実際
	には例外ではない。alti実行中は画面が再描写されるので、通常の|:echom|な
	どの表示は消されてしまうため、これを使う。
	メッセージ{errmsg}が文字列でない場合は文字列に変換される。


alti#on_insertstr_rm_arglead()		*alti#on_insertstr_rm_arglead()*
	insertstr関数|alti-define-insertstr|の中でしか呼ぶことが許されていない
	。現在入力されている文字列の中から ArgLead を除去する。これにより、
	insertstr関数が返す文字列がそのまま補完で挿入される文字列として扱われ
	るようになる。


						*alti#init()*
alti#init({define}, [{firstmsg}, [{bind}]])
	この関数にaltiの定義{define}(辞書)または定義{define}のリストを渡すと
	altiが実行される。
	文字列{firstmsg}を渡すと開始直後にのみそれが表示される。
	辞書{bind}を渡すと、{define}で指定した関数内での変数"self"にそれが
	使われる。(functionにdict属性をつけた場合のみ。詳しくは後述。)
	定義用の辞書{define}の要素は以下の通り。いずれも省略可能。

	name		(文字列)		*alti-define-name*
		既定 : ""
		定義名。空文字の場合は "Alti1" のような名前になる。

	default_text	(文字列)		*alti-define-default_text*
		既定 : ""
		開始時に標準で入力されているテキスト。

	static_head	(文字列)		*alti-define-static_head*
		既定 : ""
		default_textと似ているが削除されない。入力に何の影響も受けず、
		また与えないが、終了時に呼ばれる関数 submitted の第二引数とな
		る文字列の冒頭にこの文字列がくっつく。

	append_sep	(数値)			*alti-define-append_sep*
		既定 : 1
		非0なら、補完時に自動で空白を挟む。

	enter (関数の参照･グローバル関数名)	*alti-define-enter*
		alti開始前の、Altiバッファに移る前に呼ばれる関数である。
		元いたバッファの値を利用するときにこの関数内で取得するとよい。
		引数は取らない。

	cmpl (関数の参照･グローバル関数名)	*alti-define-cmpl*
		1つの引数{context}(辞書)|alti-Context|を取り、補完窓に表示させ
		る内容のリスト型を返す関数である。
		返値であるリストは、要素が文字列か辞書である。
		辞書を返す場合、辞書のキーは後に述べるものである。
		いずれのキーも省略可能であるが、word は絞り込みにも使われるた
		め、実質必須である。

		word	(文字列)	表示・挿入・絞り込みに使われる文字列
		view	(文字列)	表示に使われる文字列。wordより優先。
		group	(文字列/リスト)	補完時に所属するグループを指定する。
					Context.filtered()関数で使われる。
					単数の場合は文字列でも良い。
		menu	(文字列リスト)	SelectionMenu() で表示されるこの候補独
					自のメニュー
		menu_type  (文字列)	グローバルメニューに対しての表示方法。
					"override"(グローバルメニューを上書き)
					"pre"(グローバルメニューの前に表示)
					"post"(グローバルメニューの後に表示)
					の3つの値から指定する。既定では"post"
					が選択される。

		この辞書に独自のキーを作るときには、将来追加されるかも知れない
		キーのことを考慮して、キー名の先頭にアンダースコアを付けること
		が推奨される。
		また、|alti-define-insertstr|関数を変更することで候補について
		の注釈を付加したり高度な補完を実現することが可能。
		既定関数は空リストを返す。

	prompt (関数の参照･グローバル関数名)	*alti-define-prompt*
		|alti-define-cmpl|と同じく1つの引数{context}(辞書)を取り
		|alti-Context|、プロンプト文字列を返す関数である。入力に応じて
		プロンプトを変化させることが可能になる。既定関数が返すプロンプ
		ト文字列は ">>> " である。

	insertstr (関数の参照･グローバル関数名)	*alti-define-insertstr*
		既定 : "alti#insertstr_posttab_annotation"
		選択された候補で補完を実行するとき呼ばれ、返り値を入力欄に挿入
		する。
		1つの引数{context}(辞書)|alti-Context|を取る。
		Context.selection と Context.rawselection はこの関数用の要素で
		ある。
		選択された候補で補完を実行するとき呼ばれ、補完を完成させる。
		通常次のように selection の先頭から arglead を除いた値を返すよ
		うにする。 >
		  function! alti#insertstr_raw_norm_arglead(context)
		    return substitute(a:context.selection,
		      \ '^'.a:context.arglead, '', '')
		  endfunction
<		これはこの関数の返値が実際に挿入される文字列であるためである。
		つまり、"arg"まで入力されている状態で"argument"という候補で補
		完を実行した場合、実際に入力される文字列は"ument"でなければな
		らないのでSelectedCandidate("argument")からArgLead("arg")を除
		去するようにする。ただし、このinserstr関数内でのみ機能する関数
		|alti#on_insertstr_rm_arglead()|を呼んでいるのなら、
		ArgLeadを除く操作をせず、返値がそのまま挿入される補完の文字列
		となる。 >
		  function! alti#insertstr_raw_rm_arglead(context)
		    call alti#on_insertstr_rm_arglead()
		    return a:context.selection
		  endfunction
<		既定値は "alti#insertstr_posttab_annotation" である。これは、
		タブ文字以降を削除する関数である。これにより、候補の後にタブ文
		字を挟んで注釈を付けられるようにすることを意図している。標準で
		insertstr関数として利用できる関数が複数用意されている。
		詳しくは|alti-insertstr-functions|を参照。

	submitted (関数の参照･グローバル関数名)	*alti-define-submitted*
		Submitされた後に呼ばれる関数。2つの引数を取る。
		1つ目は {context}(辞書)|alti-Context|である。
		2つ目は {line}(static_head + alti終了時に入力されていた文字列)
		である。
		既定関数は入力文字列が空でなければ|:execute|する。

	canceled (関数の参照･グローバル関数名)	*alti-define-canceled*
		キャンセルされた後に呼ばれる関数。submittedと同じく引数を2つ取
		る。内容はsubmittedのものと同じである。既定関数は何もしない。

	default_actions	(リスト)		*alti-define-default_actions*
		既定 : []
		任意のアクション名を任意の数だけ指定する。このリストの第一要素
		は DefaultAction(0) (既定では<C-y>) で実行されるアクション、第
		二要素は DefaultAction(1) (既定では<C-v>) で実行されるアクショ
		ンである。アクションの動作は|alti-define-actions|で定義する。
		要素がない場合や空文字の場合にはそれらのコマンド実行時に何も起
		こらない。
		基本的に、これはメニュー|alti-define-menu|のアクションの、ショ
		ートカットという位置づけなので、この要素の数を増やすのは避ける
		べきである。

	menu		(リスト)		*alti-define-menu*
		既定 : []
		選択候補についてのアクションのメニューを定義する。これは
		SelectionMenu() キーマッピングで表示させるメニューである。
		要素は文字列か、値を2つ持つリストである。文字列の場合はアクシ
		ョン名、リストの場合は初めの要素にアクション名、次の要素に説明
		の文字列を定義する。アクションは次の |alti-define-actions|で定
		義する。

	actions		(辞書)			*alti-define-actions*
		この辞書には任意の名前の、関数の参照またはグローバル関数名を追
		加できる。ここで定義された関数は、1つの引数{context}(辞書)
		|alti-Context|を取る。

	bind		(辞書)			*alti-define-bind*
		既定 : {}
		alti内部で実行されるユーザ定義辞書の "self" にこれが代入される
		ようになる。
		|alti#init()|の第三引数 {bind} が同時に渡されていた場合は、両
		者が合成される。共通のkeyがあった場合は {bind} の方が優先され
		る。

	関数名に指定した関数にはdict属性を指定しても良い。そうした場合、"self"
	変数が利用できる。この"self"変数は初期値は空の辞書で、他のaltiの関数内
	でも同じものを参照できる。|alti#init()|の第三引数{bind}を渡すとそれが
	"self"に代入される。altiが終了されるまで(submitted関数と、canceled関数
	の終了まで)で有効。 >
		function! alti#xxx#enter() dict
		  let self.filetype = &filetype
		endfunction
		function! alti#xxx#cmpl() dict
		  return map(['a', 'b', 'c'], 'v:val. '.'.self.filetype')
		endfunction
<


--------------------------------------
						*alti-insertstr-functions*
以下の関数の関数名は|alti-define-insertstr|の値として利用することが出来る。

					*alti#insertstr_posttab_annotation()*
	alti#insertstr_posttab_annotation({context})
		|alti-define-insertstr|の既定関数である。
		タブ文字以降を無視するので、タブ文字以降を候補の注釈とすること
		が可能。


					*alti#insertstr_pretab_annotation()*
	alti#insertstr_pretab_annotation({context})
		タブ文字以前を無視するので、タブ文字以前を候補の注釈とすること
		が可能。


						*alti#insertstr()*
	alti#insertstr({context})
		候補をそのまま補完として挿入する。



==============================================================================
Altiインターフェイス				*alti-Alti-interface*

Altiキーマッピング				*alti-Alti-key-mappings*

altiバッファ内で標準で定義されるキーマッピングの名称と説明である。
|g:alti_default_mappings_base|に "standard" か "ctrlplike" を定義することで標
準のキーマッピングを選択することが出来る。
また、|g:alti_prompt_mappings|で標準で定義されたキーマッピングを上書きすること
が出来る。

	PrtAdd({char})		{char}を入力欄に挿入。

	PrtBS()			入力をカーソル前方1文字削除
		standard :		['<BS>', '<C-h>']
		ctrlplike :		['<BS>', '<C-]>']
	PrtDelete()		入力をカーソル後方1文字削除
		standard :		['<Del>', '<C-d>']
		ctrlplike :		['<Del>', '<C-d>']
	PrtDeleteWord()		入力の1単語を削除
		standard :		['<C-w>']
		ctrlplike :		['<C-w>']
	PrtClear()		入力をクリアする
		standard :		['<C-u>']
		ctrlplike :		['<C-u>']
	PrtInsertReg()		レジスタ挿入モードになる
				|g:alti_getreg_mappings|参照
		standard :		['<C-r>']
		ctrlplike :		['<C-r>', '<C-\>']
	PrtHistory(-1)		履歴を先に進める
		standard :		['<C-x><C-n>', '<C-_>']
		ctrlplike :		['<C-n>']
	PrtSmartHistory(-1)	履歴を先に進めるが、進められなければ、選択候補
				を入力欄に挿入
		standard :		[]
		ctrlplike :		[]
	PrtHistory(1)		履歴を前に遡る
		standard :		['<C-x><C-p>', '<C-s>']
		ctrlplike :		['<C-p>']
	PrtCurStart()		入力欄の先頭へ
		standard :		['<C-a>']
		ctrlplike :		['<C-a>']
	PrtCurEnd()		入力欄の末尾へ
		standard :		['<C-e>']
		ctrlplike :		['<C-e>']
	PrtCurLeft()		入力欄カーソルを左へ
		standard :		['<C-b>', '<Left>']
		ctrlplike :		['<C-h>', '<Left>']
	PrtCurRight()		入力欄カーソルを右へ
		standard :		['<C-f>', '<Right>']
		ctrlplike :		['<C-l>', '<Right>']
	PrtPage(1)	候補が多すぎて窓に入り切らないとき、次ページへとめくる
		standard :		['<C-j>', '<PageDown>', '<kPageDown>']
		ctrlplike :		['<C-f>', '<PageDown>', '<kPageDown>']
	PrtPage(-1)	候補が多すぎて窓に入り切らないとき、前ページへとめくる
		standard :		['<C-k>', '<PageUp>', '<kPageUp>']
		ctrlplike :		['<C-b>', '<PageUp>', '<kPageUp>']
	PrtSelectMove("j")	候補窓の選択を1つ下へ
		standard :		['<C-n>', '<Down>']
		ctrlplike :		['<C-j>', '<Down>']
	PrtSelectMove("k")	候補窓の選択を1つ上へ
		standard :		['<C-p>', '<Down>']
		ctrlplike :		['<C-j>', '<Down>']
	PrtSelectMove("t")	候補窓の先頭へ
		standard :	 ['<C-g>g', '<C-g><C-g>', '<Home>', '<kHome>']
		ctrlplike :	 ['<C-g>g', '<C-g><C-g>', '<Home>', '<kHome>']
	PrtSelectMove("b")	候補窓の末尾へ
		standard :		['<C-g>G', '<End>', '<kEnd>']
		ctrlplike :		['<C-g>G', '<End>', '<End>']
	PrtInsertSelection()	選択候補を入力欄へ挿入
		standard :		['<Tab>']
		ctrlplike :		['<Tab>']
	PrtInsertSelection({char})
				選択候補を入力欄へ挿入。候補がないときや、エス
				ケープ文字 "\" が直前に存在するときには代わり
				に文字{char}を挿入する。
		standard :		Undefined
		ctrlplike :		Undefined
	SelectionMenu()		選択候補についてのアクションメニューを出す
		standard :		['<C-o>']
		ctrlplike :		['<C-o>']
	PrtExit()		キャンセルしてalti終了
		standard :		['<Esc>', '<C-c>']
		ctrlplike :		['<Esc>', '<C-c>']
	PrtSubmit()		確定してalti終了
		standard :		['<CR>']
		ctrlplike :		['<CR>']
	DefaultAction(0)	|alti-define-default_actions|で指定した0番目の
				インデックスのアクションを実行する。
		standard :		['<C-y>']
		ctrlplike :		['<C-y>']
	DefaultAction(1)	|alti-define-default_actions|で指定した1番目の
				インデックスのアクションを実行する。
		standard :		['<C-v>']
		ctrlplike :		['<C-v>']
	ToggleType(1)		次の定義に切り替える
		standard :		['<C-^>', '<C-x><C-f>', '<C-Down>']
		ctrlplike :		['<C-^>', '<C-x><C-f>', '<C-Down>']
	ToggleType(-1)		前の定義に切り替える
		standard :		['<C-x><C-b>', '<C-Up>']
		ctrlplike :		['<C-x><C-b>', '<C-Up>']


------------------------------------------------------------------------------
Context						*alti-Context*

Contextは|alti#init()|に渡す定義{define}の中で定義される関数の第一引数として渡
される辞書である。
これらの関数の挙動はこの辞書の要素を利用すれば細かく定義することができる。
以下の要素を持つ。
insertstr関数で有用な要素と、cmpl関数などで有用な要素がある。

# 共通で有用~
Context.inputline	入力文字列全体
Context.inputs		入力された文字列を非エスケープ空白で分割したリスト。現
			在入力中の単語はこのリストに含めない。
Context.static_head	現在の static_head |alti-define-static_head|

# insertstr関数 や action関数 で有用~
Context.selection	選択された候補文字列。候補が文字列の場合はそのままだが
			、候補が辞書の場合、"word" キーのものが使われる。型は
			文字列に変換される。
Context.rawselection	選択された候補文字列。候補が辞書の場合、辞書そのものが
			使われる。候補が文字列の場合、selection と同じである。

# cmpl関数などで有用~
Context.arglead		補完対象の文字列
Context.precursor	カーソルより前の文字列
Context.postcursor	カーソルを含むカーソルより後の文字列
Context.leftwords	カーソル前の文字列を非エスケープ空白で分割したリスト
Context.leftcount	カーソルより前にある単語の数。入力中のものは含めない。
Context.cursoridx	カーソルの位置(バイト単位のインデックス)

Context.filtered({candidates})
	cmpl関数|alti-define-cmpl|用の関数である。
	補完候補リスト{candidates}から、文脈に応じて不要なものを削除したリスト
	を返す。文脈とは、既に入力されている文字列や補完対象の文字列(arglead)
	などである。argleadに前方一致マッチする候補が使われる。また、空文字、
	空要素も取り除かれる。
	補完候補リスト{candidates}の要素は、文字列・数値・浮動小数点数か、リス
	トか、辞書である。
	返値はリストで、その要素は、元の要素が辞書の場合はその辞書であり、そう
	でなければ文字列である。
	文字列・数値・浮動小数点数の場合、例えば以下のようなリストを渡すと、 >
		["foo", "bar", "baz", "qux"]
<	補完候補は "foo" "bar" "baz" "qux" から絞り込まれる。
	リストを渡す場合、その第一要素は補完候補文字列、第二要素以降はその補完
	候補が所属するグループである。
	グループは排他的な候補を作るのに利用する。 >
		["foo", ["bar", "BARZ"], ["baz", "BARZ"], "qux"]
<	この場合、"foo" "bar" "baz" "qux" という候補があり、"bar" と "baz" は
	"BARZ" というグループに属している。、コマンドラインに "bar" "baz" のい
	ずれかが既に入力されているなら、もう片方も補完候補から除外される。
	グループの指定を複数することができる。それには第二要素をリストにするか
	、第三要素以降を利用する。以下の2種類の指定は同じ結果となる。 >
		[["foo", ["A","B"]], ["bar", "A"], ["baz", "B"], "qux"]
		[["foo", "A","B"], ["bar", "A"], ["baz", "B"], "qux"]
<	この場合、"foo" は "A" "B" 両グループに所属するので、"bar" "baz" のど
	ちらかが入力されていると候補に現れないし、 "foo" が入力されているのな
	ら "bar" "baz" は補完候補から除外される。
	辞書の場合、絞り込みには "word" キーが使われ、"group" キーでグループを
	指定する。
	例えば以下のようなリストになる。 >
		[ {"word": "foo", "view": "fofo", "group": ["A", "B"]},
		\ {"word": "bar", "view": "baba", "group": "A"},
		\ {"word": "baz", "view": "BAZ", "group": "B"},
		\ "qux"]
<	文字列とリストと辞書を織り交ぜることも出来る。 >
		[ ["foo", ["A", "B"]],
		\ {"word": "bar", "view": "baba", "group": "A"},
		\ ["baz", "B"], "qux"]
<	ただしグループを生成する内リストの要素を辞書にすることはできない。以下
	の例は誤りである。 >
		[ [{"word": "foo", "view": "fofo"}, ["A", "B"]],
		\ [{"word": "bar", "view": "baba"}, "A"], ["baz", "B"], "qux"]
<	特殊なグループとして "__PARM" というものがある。このグループに所属して
	いる補完候補は既に自身や同じグループの候補がコマンドラインに入力されて
	いても、構わず補完候補に現れる。例えば、 >
		[["foo", ["__PARM","A"]], ["bar", "A"], ["baz", "A"], "qux"]
<	の場合、既にコマンドラインに "foo" が入力されていても、 "bar" や "baz"
	が入力されていても、候補には常に "foo" が表示される。ただし alglead の
	絞り込みの影響は受ける。
	グループ名には文字列、数値、浮動小数点数が使える。文字列の場合は空文字
	は利用できない。また、アンダースコアを頭に2つ付けた名前は予約されてい
	る。

Context.backward_filtered({candidates})
	|Context.filtered()|と同じだが arglead に前方一致ではなく後方一致で絞
	り込む。

Context.partial_filtered({candidates})
	|Context.filtered()|と同じだが arglead に前方一致ではなく部分一致で絞
	り込む。

Context.fuzzy_filtered({candidates})
	|Context.filtered()|と同じだが arglead に前方一致ではなく曖昧一致で絞
	り込む。曖昧一致とは、例えば "fbr" という arglead に対して、"foobar"
	"february" "quxfoobarbaz" などの候補が絞り込まれる。



==============================================================================
TODO						*alti-todo*

- ハイライトをもう少しどうにかしたい。


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
