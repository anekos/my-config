*prettyprint.txt*	Prettyprint vim variables.

Version: 0.3.3
Author : thinca <thinca+vim@gmail.com>
License: zlib License

==============================================================================
CONTENTS					*prettyprint-contents*

INTRODUCTION			|prettyprint-introduction|
INTERFACE			|prettyprint-interface|
  COMMANDS			  |prettyprint-commands|
  FUNCTIONS			  |prettyprint-functions|
OPTIONS				|prettyprint-options|
FORMAT RULES			|prettyprint-format-rules|
LIMITATION			|prettyprint-limitation|
CHANGELOG			|prettyprint-changelog|


==============================================================================
INTRODUCTION					*prettyprint-introduction*

*prettyprint.vim* is a Vim plugin to prettyprint vim variable for debug.


Requirements:
- Vim 7.2 or later

Latest version:
http://github.com/thinca/vim-prettyprint



==============================================================================
INTERFACE					*prettyprint-interface*

------------------------------------------------------------------------------
COMMANDS					*prettyprint-commands*

:PrettyPrint[!] {expr} [, ...]			*:PrettyPrint*
			The command version of |PrettyPrint()|.  When two or
			more values are passed, it is necessary to delimit
			each value by the comma.  If [!] is given, the output
			is saved to the |message-history| by using |:echomsg|.

:PP[!] {expr} [, ...]				*:PP*
			This is a short version of |:PrettyPrint|.

------------------------------------------------------------------------------
FUNCTIONS					*prettyprint-functions*

PrettyPrint({expr} [, ...])			*PrettyPrint()*
			Return {expr} converted to a formatted String.  When
			two or more values are passed, it is delimited by
			"\n".

PP({expr} [, ...])				*PP()*
			This is a short version of |PrettyPrint()|.



==============================================================================
OPTIONS						*prettyprint-options*

g:prettyprint_indent				*g:prettyprint_indent*
b:prettyprint_indent				*b:prettyprint_indent*
	Width of indent.  If the type of value is String, |eval()| is applied.
	The default value is "shiftwidth()" or "&l:shiftwidth".

g:prettyprint_width				*g:prettyprint_width*
b:prettyprint_width				*b:prettyprint_width*
	Width by return.  If the type of value is String, |eval()| is applied.
	The default value is "&columns".

g:prettyprint_string				*g:prettyprint_string*
b:prettyprint_string				*b:prettyprint_string*
	Format of string.  This is a |List| of the following values.
	- "split"
	- "raw"
	See |prettyprint-format-rules-String| for details.
	The default value is [] (empty list).

g:prettyprint_show_expression			*g:prettyprint_show_expression*
	Show also expression not only evaluated value.
	e.g.: If this variable is true,
	":PP 1 + 1" outputs "1 + 1 = 2".
	If false, it just outputs "2".


==============================================================================
FORMAT RULES					*prettyprint-format-rules*

String					*prettyprint-format-rules-String*
	See also |g:prettyprint_string|.
	By default, |strtrans()| and |string()| are sequentially used.
	If |g:prettyprint_string| contains "raw", don't use |strtrans()|.
	If |g:prettyprint_string| contains "split" and the string has two or
	more lines, it is displayed by the following styles.
>
	join([
	  'line1',
	  'line2'
	], "\n")

Number					*prettyprint-format-rules-Number*
Float					*prettyprint-format-rules-Float*
	|string()| is used.

List					*prettyprint-format-rules-List*
	List is displayed by same style as |string()|.  If the limit of
	width is exceeded, it is displayed by the following styles.
>
	[
	  element1,
	  element2,
	  element3
	]
<
	If nested element is appear, it is displayed by the following styles.
>
	[nested element {number}]
<
	The {number} is count from top level.
>
	let x = [10]
	let x += [x]
	PP x  " => [10, [nested element 0]]
<
Dictionary				*prettyprint-format-rules-Dictionary*
	Dictionary is displayed by same style as |string()|.  If the limit of
	width is exceeded, it is displayed by the following styles.
>
	{
	  'key1': value1,
	  'key2': value2,
	  'key3': value3
	}
<
	The keys are sorted by |sort()|.
	If nested element is appear, it is displayed by same style as List,
	but it use brace instead of bracket.

Funcref					*prettyprint-format-rules-Funcref*
	Normally, |string()| is used.  If 'verbose' is one, the definition of
	function is displayed by using |:function|.  If 'verbose' is two or
	more, in addition, the file which the function was defined at last is
	displayed by |:function-verbose|.



==============================================================================
LIMITATION					*prettyprint-limitation*

- Key of dictionary is displayed by |strtrans()|.

- In internal, the recursive call is used.  This is subject to the limitation
  of it. See 'maxfuncdepth'.

- Can't access a script local variable/function via the command.
  - This is specification of Vim.  Use |PP()| instead.
>
	let s:var = 0
	function s:dump(var)
	  let l:var = 0
	  " OK
	  PP a:var
	  " OK
	  PP l:var
	  " NG
	  PP s:var
	  " OK
	  echo PP(s:var)
	endfunction



==============================================================================
CHANGELOG					*prettyprint-changelog*

0.3.3	2016-02-08
	- Autoloadize.
	- Fix for |g:prettyprint_string| option.
	- Fix default value of |g:prettyprint_width|.

0.3.2	2011-12-22
	- Added |g:prettyprint_string| option.
	- Improved Funcref support.

0.3.1	2010-09-07
	- Added the buffer local version of options.
	  - |b:prettyprint_indent|
	  - |b:prettyprint_width|
	- |:PrettyPrint| accepts "!" for saving the output.

0.3.0	2009-11-20
	- Changed the treatment of options.
	  - Applies the eval() function if the type of value is String.
	- Improved the return algorithm.


0.2.2	2009-08-03
	- Fixed a bug that doesn't work if the values with different type is
	  passed at a time.

0.2.1	2009-07-09
	- Fixed a bug that doesn't work if |Funcref| was put on other than the
	  dictionary.

0.2.0	2009-06-25
	- Fix typos in this document.
	- Rename the plugin name.
	  - dumper.vim -> prettyprint.vim

0.1.0	2009-06-24
	- Initial version.


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
